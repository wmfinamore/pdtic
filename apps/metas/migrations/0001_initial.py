# Generated by Django 5.1.4 on 2025-01-19 02:06

import django.db.models.deletion
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('necessidades', '0003_historicalnecessidadeti_necessidadeti'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalMeta',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('data_inclusao', models.DateField(blank=True, editable=False, verbose_name='Data de Inclusão')),
                ('hora_inclusao', models.DateTimeField(blank=True, editable=False, verbose_name='Hora de Inclusão')),
                ('data_alteracao', models.DateField(blank=True, editable=False, verbose_name='Data de Alteração')),
                ('hora_alteracao', models.DateTimeField(blank=True, editable=False, verbose_name='Hora de Alteração')),
                ('codigo', models.CharField(db_comment='Código da meta', db_index=True, max_length=10)),
                ('nome', models.TextField(db_comment='Nome da meta', db_index=True)),
                ('indicador', models.TextField(db_comment='Indicador de meta relacionado com a meta')),
                ('valor_meta', models.TextField(db_comment='Valor a ser alcançado pelo indicador da meta')),
                ('prazo', models.DateField(db_comment='Prazo para a meta alcançar o valor estipulado para o indicador')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Meta',
                'verbose_name_plural': 'historical Metas',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Meta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_inclusao', models.DateField(auto_now_add=True, verbose_name='Data de Inclusão')),
                ('hora_inclusao', models.DateTimeField(auto_now_add=True, verbose_name='Hora de Inclusão')),
                ('data_alteracao', models.DateField(auto_now=True, verbose_name='Data de Alteração')),
                ('hora_alteracao', models.DateTimeField(auto_now=True, verbose_name='Hora de Alteração')),
                ('codigo', models.CharField(db_comment='Código da meta', max_length=10, unique=True)),
                ('nome', models.TextField(db_comment='Nome da meta', unique=True)),
                ('indicador', models.TextField(db_comment='Indicador de meta relacionado com a meta')),
                ('valor_meta', models.TextField(db_comment='Valor a ser alcançado pelo indicador da meta')),
                ('prazo', models.DateField(db_comment='Prazo para a meta alcançar o valor estipulado para o indicador')),
                ('necessidades', models.ManyToManyField(db_comment='Necessidades relacionadas com a meta', related_name='metas_necessidade', to='necessidades.necessidadeti')),
            ],
            options={
                'verbose_name': 'Meta',
                'verbose_name_plural': 'Metas',
                'db_table_comment': 'Metas relacionado com as necessidades inventariadas',
                'ordering': ['codigo'],
            },
        ),
    ]
